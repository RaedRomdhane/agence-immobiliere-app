name: CI Pipeline

# D√©clencheurs
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Permet d√©clenchement manuel

# Variables d'environnement globales
env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: Linting et v√©rification du code
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Installation des d√©pendances Backend
        working-directory: ./backend
        run: npm ci

      - name: Ex√©cution du linter
        working-directory: ./backend
        run: npm run lint
        continue-on-error: true

  # Job 2: Tests Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Installation des d√©pendances
        working-directory: ./backend
        run: npm ci

      - name: Ex√©cution des tests unitaires
        working-directory: ./backend
        run: npm run test:ci

      - name: V√©rification de la couverture
        working-directory: ./backend
        run: |
          echo "V√©rification que la couverture minimum est atteinte..."
          npm run test:ci

      - name: Upload du rapport de couverture
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: backend/coverage/
          retention-days: 30

      - name: Afficher le r√©sum√© de la couverture
        working-directory: ./backend
        run: |
          echo "üìä R√©sum√© de la couverture de code:"
          cat coverage/coverage-summary.json || echo "Pas de rapport de couverture disponible"

  # Job 3: Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Installation des d√©pendances
        working-directory: ./backend
        run: npm ci --production

      - name: V√©rification de la structure du projet
        run: |
          echo "V√©rification de la structure du projet..."
          ls -la backend/src/
          echo "‚úÖ Structure valid√©e"

      - name: Test de d√©marrage (dry-run)
        working-directory: ./backend
        run: |
          echo "Test de d√©marrage de l'application..."
          timeout 5s npm start || code=$?
          if [ $code -eq 124 ]; then
            echo "‚úÖ L'application d√©marre correctement"
            exit 0
          else
            echo "‚ùå Erreur au d√©marrage"
            exit 1
          fi

  # Job 4: Rapport de synth√®se
  report:
    name: Rapport de synth√®se
    runs-on: ubuntu-latest
    needs: [lint, test-backend, build-backend]
    if: always()
    
    steps:
      - name: T√©l√©charger le rapport de couverture
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./coverage
        continue-on-error: true

      - name: Cr√©er le r√©sum√©
        run: |
          echo "# üìä R√©sum√© du Pipeline CI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Jobs ex√©cut√©s" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests Backend: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Backend: ${{ needs.build-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìà Statistiques" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
          echo "- Branche: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

      - name: V√©rifier le statut global
        run: |
          if [ "${{ needs.test-backend.result }}" != "success" ]; then
            echo "‚ùå Les tests ont √©chou√©"
            exit 1
          fi
          if [ "${{ needs.build-backend.result }}" != "success" ]; then
            echo "‚ùå Le build a √©chou√©"
            exit 1
          fi
          echo "‚úÖ Tous les jobs ont r√©ussi!"
